<<<<<<< HEAD
;1st question

section .data
    newline db 10
    msg1 db "Enter the number of elements: "
    len1 equ $-msg1
    msg2 db "Enter the elements of the array: ", 0Ah
    len2 equ $-msg2
    msg3 db "No. of even numbers: "
    len3 equ $-msg3
    msg4 db "No. of odd numbers: "
    len4 equ $-msg4
=======
;1st question --------------------------------------------------

section .data
    newline db 10
    space db 32
    msg1 db "Enter n: "
    len1 equ $-msg1
    msg2 db "Enter m: "
    len2 db $-msg2

section .bss
    n resb 2
    m resb 2
    num resb 2
    arr resw 20
    arr1 resw 20
    arr2 resw 20
    arr3 resw 20
    arrcount resb 2
    arrsize resb 2
    temp resb 2
    count resb 2
    j resb 2
    k resb 2

section .text
global _start
_start:
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
    int 80h

    call read_num
    mov ax, word[num]
    mov word[n], ax

    mov eax, 4
    mov ebx, 1
    mov ecx, msg2
    mov edx, len2
    int 80h

    call read_num
    mov ax, word[num]
    mov word[m], ax

    mov ax, word[n]
    mov word[arrsize], ax
    mov ebx, arr1
    call read_array

    mov ax, word[m]
    mov word[arrsize], ax
    mov ebx, arr2
    call read_array

    mov ax, word[n]
    mov word[arrsize], ax
    mov ebx, arr1
    call print_array

    mov ax, word[m]
    mov word[arrsize], ax
    mov ebx, arr2
    call print_array

    mov ebx, arr3
    call merge

    mov ax, word[n]
    add ax, word[m]
    mov word[arrsize], ax
    mov ebx, arr3
    call print_array

    


    
    exit:
        mov eax, 1
        mov ebx, 0
        int 80h

;---FUNCTIONS---

merge:
    ;pusha
    ;i = 0, j = 0, k = 0
    ;while i<(n+m):
    ;   if j>=n:
    ;       arr[i] = b[k]
    ;       i++
    ;       k++
    ;       continue
    ;   if k>m:
    ;       arr[i] = a[j]
    ;       j++
    ;       i++
    ;       continue
    ;   if a[j] >= b[k]:
        ;   arr[i] = a[j]
        ;   i++
    ;       j++
    ;       continue

    ;   if a[j]<b[k]:
    ;       arr[i] = b[k]
    ;       i++
    ;       k++


    mov word[arrcount], 0
    mov word[j], 0
    mov word[k], 0
    mov eax, 0
    merge_loop:
        mov ax, word[n]
        add ax, word[m]
        cmp word[arrcount], ax
        jae exit_merge_loop

        ;---           ---------------------------------------------------
        mov ax, word[j]
        cmp ax, word[n]
        jae if1
            else1:
                jmp L1
            if1:
                mov ax, word[k]
                mov dx, word[arr2 + 2*eax]

                mov ax, word[arrcount]
                mov ebx, arr3
                mov word[ebx + 2*eax], dx

                inc word[arrcount]
                inc word[k]
                jmp merge_loop
            L1:

        mov ax, word[k]
        cmp ax, word[m]
        jae if2
            else2:
                jmp L2
            if2:
                mov ax, word[j]
                mov dx, word[arr1 + 2*eax]

                mov ax, word[arrcount]
                mov ebx, arr3
                mov word[ebx + 2*eax], dx

                inc word[arrcount]
                inc word[j]
                jmp merge_loop
            L2:

        mov ax, word[j]
        mov dx, word[arr1 + 2*eax]

        mov ax, word[k]
        mov ax, word[arr2 + 2*eax]
        mov cx, ax

        cmp dx, cx
        jnb if3
            else3:
                ;cx is bigger ==>arr2 is bigger
                mov ax, word[k]
                mov dx, word[arr2 + 2*eax]

                mov ax, word[arrcount]
                mov ebx, arr3
                mov word[ebx + 2*eax], dx

                inc word[arrcount]
                inc word[k]
                
                jmp L3
            if3:
                ;dx is bigger ==> arr1 is bigger
                mov ax, word[j]
                mov dx, word[arr1 + 2*eax]

                mov ax, word[arrcount]
                mov ebx, arr3
                mov word[ebx + 2*eax], dx

                inc word[arrcount]
                inc word[j]
                jmp L3
            L3:
                jmp merge_loop
                
            ;---------- -----------------------

        jmp merge_loop
    exit_merge_loop:
    ;popa
    ret

read_array:
    pusha
    mov ax, word[arrsize]
    mov word[arrcount], ax

    read_array_loop:
        cmp word[arrcount], 0
        je exit_read_array_loop

        call read_num
        mov cx, word[num]
        mov ax, word[arrcount]
        mov word[ebx+2*eax], cx

        dec word[arrcount]
        jmp read_array_loop
    exit_read_array_loop:
    popa
    ret

print_array:
    pusha
    mov ax, word[arrsize]
    mov word[arrcount], ax

    print_array_loop:
        cmp word[arrcount], 0
        je exit_print_array_loop

        mov ax, word[arrcount]
        mov cx, word[ebx+2*eax]

        mov word[num], cx
        call print_num


        dec word[arrcount]
        jmp print_array_loop
    exit_print_array_loop:

    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 80h

    popa

    ret

read_num:
    pusha
    mov word[num], 0
    read_loop:
        mov eax, 3
        mov ebx, 0
        mov ecx, temp
        mov edx, 1
        int 80h

        cmp word[temp], 10
        je exit_read_loop

        sub word[temp], 30h
        
        mov ax, word[num]
        mov bx, 10
        mul bx

        add ax, word[temp]

        mov word[num], ax

        jmp read_loop
    exit_read_loop:
    popa
    ret

print_num:
    pusha
    mov word[count], 0
    extract_no:
        cmp word[num], 0
        je exit_extract_no

        mov dx, 0
        mov ax, word[num]

        mov bx, 10
        div bx

        push dx

        inc word[count]

        mov word[num], ax
        jmp extract_no
    exit_extract_no:

    print_no:
        cmp word[count], 0
        je exit_print_no

        pop dx
        mov word[temp], dx
        add word[temp], 30h

        mov eax, 4
        mov ebx, 1
        mov ecx, temp
        mov edx, 1
        int 80h

        dec word[count]
        jmp print_no
    exit_print_no:

    mov eax, 4
    mov ebx, 1
    mov ecx, space
    mov edx, 1
    int 80h

    popa
    ret 

print:
    pusha
    call print_num

    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 80h

    ret
    popa




;5th question ---------------------------------------------

section .data
    newline db 10
    space db 32
    msg1 db "Enter array: "
    len1 equ $-msg1
    msg2 db "Enter second array: "
    len2 equ $-msg2
    msg3 db "After sorting: "
    len3 equ $-msg3
>>>>>>> 22d0435566f678ce836755c303afe6668c284776

section .bss
    count resb 2
    arrcount resb 2
    num resb 2
    temp resb 2
    arrsize resb 4
<<<<<<< HEAD
    arr resw 5
    even resb 2
    odd resb 2
=======
    arr resw 20
    i resw 1
    j resw 2
>>>>>>> 22d0435566f678ce836755c303afe6668c284776
    


section .text
global _start
_start:

<<<<<<< HEAD

    call read_array
    call count_array
=======
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
    int 80h

    mov word[arrcount], 0

    call read_inp
    mov bx, word[num]
    mov word[arrsize], bx

    call read_array
    ; call print_array

    ; mov eax, 4
    ; mov ebx, 1
    ; mov ecx, msg2
    ; mov edx, len2
    ; int 80h

    ; call read_inp
    ; mov bx, word[num]
    ; add word[arrsize], bx

    ; call read_array

    call sort

    mov eax, 4
    mov ebx ,1
    mov ecx, msg3
    mov edx, len3
    int 80h

    call print_array
>>>>>>> 22d0435566f678ce836755c303afe6668c284776

    exit:
        mov eax, 1
        mov ebx, 0
        int 80h

    ;------------------FUNCtIONS-----------------;

<<<<<<< HEAD
    read_inp:
=======
    sort:
    ;i = 0
    ;j = 0
    ;while i<n-1:
    ;   j = 0
    ;   while j<n-1:
    ;       if *(arr+i)> *(arr + i + 1):
    ;           swap
    ;       j++
    ;   i++

    pusha

        mov word[i], 0
        mov dword[j], 0

        mov ax, word[arrsize]
        mov word[arrcount], ax
        dec word[arrcount]

        sortloop1:
            mov ax, word[i]
            cmp ax, word[arrcount]
            je exit_sortloop1

            mov dword[j], 0
            sortloop2:
                mov ax, word[j]
                cmp ax, word[arrcount]
                je exit_sortloop2


                mov eax, 0
                mov eax, dword[j]
                mov bx, word[arr + 2*eax]
                mov cx, word[arr + 2*eax+2]
                cmp bx, cx
                ja if1
                    else1:
                        jmp L1
                    if1:
                        ; mov bx, word[arr + 2*eax]
                        ; mov cx, word[arr + 4*eax]
                        mov word[arr + 2*eax+2], bx
                        mov word[arr + 2*eax], cx
                    L1:




                inc dword[j]
                jmp sortloop2
            exit_sortloop2:


            inc word[i]
            jmp sortloop1
        exit_sortloop1:

    popa
    ret

    read_inp:
        pusha
>>>>>>> 22d0435566f678ce836755c303afe6668c284776
        mov word[num], 0
        read_num:

            mov eax, 3
            mov ebx, 0
            mov ecx, temp
            mov edx, 1
            int 80h

            cmp byte[temp], 10
            je exit_read_num

<<<<<<< HEAD
=======
            cmp byte[temp], 32
            je exit_read_num

>>>>>>> 22d0435566f678ce836755c303afe6668c284776
            sub byte[temp], 30h
            mov ax, word[num]
            mov bx, 10
            mul bx

            mov bh, 0
            mov bl, byte[temp]

            add ax, bx
            mov word[num], ax

            jmp read_num
            
        exit_read_num:
<<<<<<< HEAD
=======
    popa
>>>>>>> 22d0435566f678ce836755c303afe6668c284776
    ret

    print_num:
        pusha
        ;while num!= 0
        ;   temp = num%10
        ;   push temp
        ;   num = num/10
        ;   count++

        ;while count!=0
        ;   pop temp
        ;   print temp
        ;   count--
        
        mov word[count], 0
        extract_no:
            cmp word[num], 0
            je exit_extract_no

            mov dx, 0
            mov ax, word[num]
            mov bx, 10
            div bx

            push dx
            mov word[num], ax
            inc word[count]
            jmp extract_no
        exit_extract_no:

        print_no:
            cmp word[count], 0
            je exit_print_no
            pop dx

            mov word[temp], dx
            add word[temp], 30h

            mov eax, 4
            mov ebx, 1
            mov ecx, temp
            mov edx, 1
            int 80h

            dec word[count]
            jmp print_no
        exit_print_no:
    exit_print_num:

    mov eax, 4
    mov ebx, 1
<<<<<<< HEAD
    mov ecx, newline
    mov edx, 1
    int 80h
    popa
    ret

=======
    mov ecx, space
    mov edx, 1
    int 80h
    

    popa
    ret

    print:
        pusha
        call print_num
        
        mov eax, 4
        mov ebx, 1
        mov ecx, 10
        mov edx, 1
        int 80h

        popa
    ret

>>>>>>> 22d0435566f678ce836755c303afe6668c284776
    
    read_array:
        ;i = 0
        ; while i<n:
        ;   read num
        ;   *(arr+i) = num 
        ;   i++
        ; endwhile

<<<<<<< HEAD
        mov word[arrcount], 0 ;counter

        ;read size
        mov eax, 4
        mov ebx, 1
        mov ecx, msg1
        mov edx, len1
        int 80h

        call read_inp

        mov bx, word[num]
        mov word[arrsize], bx

        ;read elements
        mov eax, 4
        mov ebx, 1
        mov ecx, msg2
        mov edx, len2
        int 80h
=======
        ; mov word[arrcount], 0 ;counter
>>>>>>> 22d0435566f678ce836755c303afe6668c284776


        array_loop:
            mov ax, word[arrcount]
            cmp ax, word[arrsize]
            jnb array_loop_exit

            call read_inp
            mov cx, word[num]

            mov ax, word[arrcount]

            mov word[arr + 2*eax], cx

            

            inc word[arrcount]
            jmp array_loop
        array_loop_exit:

    exit_read_array:
    ret

    print_array:
        pusha
        ;while i<n:
        ;   print *(arr+i)
        ;   i++
        ; mov word[arrcount], 0
        mov word[arrcount], 0
        mov ebx, arr

        ; mov word[num],


        print_array_loop:
            mov ax, word[arrcount]
            cmp ax, word[arrsize]
            je exit_print_array_loop

            mov ax, word[arrcount]    
            mov cx, word[arr + 2*eax]
            mov word[num], cx

            call print_num

<<<<<<< HEAD
=======
            

>>>>>>> 22d0435566f678ce836755c303afe6668c284776
            inc word[arrcount]
            jmp print_array_loop
        exit_print_array_loop:
    exit_print_array:
<<<<<<< HEAD
    popa
    ret

    count_array:
        ;while i<n:
        ;   if *(arr+i)%2 == 0:
        ;       even++
        ;   i++
        
        mov word[arrcount], 0
        mov word[even], 0
        count_loop:
            mov ax, word[arrcount]
            cmp ax, word[arrsize]
            je exit_count_loop

            mov ax, word[arrcount]
            mov dx, 0
            mov ax, word[arr+2*eax]
            mov bx, 2
            div bx

            cmp dx, 0
            je if1
            else1:
                jmp L1
            if1:
                inc word[even]
            L1:

            inc word[arrcount]
            jmp count_loop
        exit_count_loop:

        mov eax, 4
        mov ebx, 1
        mov ecx, msg3
        mov edx, len3
        int 80h

        mov ax, word[even]
        mov word[num], ax

        call print_num

        mov bx, word[arrsize]
        mov word[odd], bx
        sub word[odd], ax

        mov eax, 4
        mov ebx, 1
        mov ecx, msg4
        mov edx, len4
        int 80h

        mov ax, word[odd]
        mov word[num], ax

        call print_num

    exit_count_array:
    ret

;---------------------------------------------------------
;7th question

section .data
    newline db 10
    msg1 db "Enter string: "
    len1 equ $-msg1
    msg2 db "Not a palindrome", 0Ah
    len2 equ $-msg2
    msg3 db "It is a palindrome", 0Ah
    len3 equ $-msg3

section .bss
    str1 resb 50
    strlen1 resb 2
    temp resb 2
    count resb 2
    temp2 resb 2

section .text
global _start
_start:

    call read_string
    call palindrome
    ; call print_string

    exit:
        mov eax, 1
        mov ebx, 0
        int 80h

    read_string:

        mov eax, 4
        mov ebx, 1
        mov ecx, msg1
        mov edx, len1
        int 80h
        
        mov word[strlen1], 0
        string_loop:
            mov eax, 3
            mov ebx, 0
            mov ecx, temp
            mov edx, 1
            int 80h

            cmp word[temp], 10
            je exit_string_loop

            mov bx, word[temp]
            mov ax, word[strlen1]
            mov word[str1 + 2*eax], bx

            inc word[strlen1]
            jmp string_loop
        exit_string_loop:

    exit_read_string:
    ret

    palindrome:
        mov word[count], 0
        palindrome_loop:
            mov ax, word[count]
            cmp ax, word[strlen1]
            je exit_palindrome_loop

            mov bx, word[strlen1]
            mov word[temp], bx
            sub word[temp], 1
            
            mov bx, word[count]
            sub word[temp], bx

            mov ax, word[temp]
            mov bx, word[count]
            mov cx, word[str1 + 2*ebx]
            mov dx, word[str1 + 2*eax]

            cmp cx, dx
            jne exit_palindrome

            inc word[count]
            jmp palindrome_loop
        exit_palindrome_loop:

        mov eax, 4
        mov ebx, 1
        mov ecx, msg3
        mov edx, len3
        int 80h

        ret
    exit_palindrome:

    mov eax, 4
    mov ebx, 1
    mov ecx, msg2
    mov edx, len2
    int 80h

    ret

    print_string:
        mov word[count], 0
        print_string_loop:
            mov ax, word[count]
            cmp ax, word[strlen1]
            je exit_print_string_loop

            mov ax, word[count]
            mov bx, word[str1 + 2*eax]
            mov word[temp], bx

            ; add word[count], 30h
            ; mov eax, 4
            ; mov ebx, 1
            ; mov ecx, count
            ; mov edx, 1
            ; int 80h
            ; sub word[count], 30h

            mov eax, 4
            mov ebx, 1
            mov ecx ,temp
            mov edx, 1
            int 80h

            inc word[count]
            jmp print_string_loop
        exit_print_string_loop:

    exit_print_string:
    ret

;--------------------------------------------------------------------
;6th question

section .data
    newline db 10
    msg1 db "Enter n: "
    len1 equ $-msg1
    msg2 db "Enter m: "
    len2 equ $-msg2
    msg3 db "Enter the elements of A: "
    len3 equ $-msg3
    msg4 db "Enter the elements of B: "
    len4 equ $-msg4
    space db ' '
    msg5 db "C: ", 0Ah
    len5 equ $-msg5

section .bss
    num resb 2
    count resb 2
    temp resb 2
    i_count resb 2
    j_count resb 2

    A resw 50
    B resw 50
    C resw 50
    n1 resb 2
    m1 resb 2
=======

    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 80h

    popa
    ret

;2nd question --------------------------------------------------

section .data
    newline db 10
    space db 32
    msg1 db "Enter n and m: "
    len1 equ $-msg1
    msg2 db "Enter second array: "
    len2 equ $-msg2
    msg3 db "Final array: "
    len3 equ $-msg3

section .bss
    count resb 2
    arrcount resb 2
    num resb 2
    n resb 2
    m resb 2
    temp resb 2
    arrsize resb 4
    arr resw 20
    i resw 2
    j resw 2
    k resw 2

>>>>>>> 22d0435566f678ce836755c303afe6668c284776

section .text
global _start
_start:

<<<<<<< HEAD
=======

>>>>>>> 22d0435566f678ce836755c303afe6668c284776
    mov eax, 4
    mov ebx, 1
    mov ecx, msg1
    mov edx, len1
<<<<<<< HEAD
    int 80h

    call read_inp
    mov ax, word[num]
    mov word[n1], ax

    mov eax, 4
    mov ebx, 1
    mov ecx, msg2
    mov edx, len2
    int 80h

    call read_inp
    mov ax, word[num]
    mov word[m1], ax


    ;Elements of each matrix

    mov eax, 4
    mov ebx, 1
    mov ecx, msg3
    mov edx, len3
    int 80h

    mov word[i_count], 0
    i1_loop:
        mov ax, word[i_count]
        cmp ax, word[n1]
        je exit_i1_loop

        mov word[j_count], 0
        j1_loop:
            mov ax, word[j_count]
            cmp ax, word[m1]
            je exit_j1_loop

            call read_inp
            mov ax, word[i_count]
            add ax, word[j_count]

            mov bx, word[num]
            mov word[A + 2*eax], bx

            inc word[j_count]
            jmp j1_loop
        exit_j1_loop:

        inc word[i_count]
        jmp i1_loop
    exit_i1_loop:

    mov eax, 4
    mov ebx, 1
    mov ecx, msg4
    mov edx, len4
    int 80h

    mov word[i_count], 0
    i2_loop:
        mov ax, word[i_count]
        cmp ax, word[n1]
        je exit_i2_loop

        mov word[j_count], 0
        j2_loop:
            mov ax, word[j_count]
            cmp ax, word[m1]
            je exit_j2_loop

            call read_inp
            mov ax, word[i_count]
            add ax, word[j_count]

            mov bx, word[num]
            mov word[B + 2*eax], bx

            inc word[j_count]
            jmp j2_loop
        exit_j2_loop:

        inc word[i_count]
        jmp i2_loop
    exit_i2_loop:

    mov eax, 4
    mov ebx, 1
    mov ecx, msg5
    mov edx, len5
    int 80h

    mov word[i_count], 0
    i3_loop:
        mov ax, word[i_count]
        cmp ax, word[n1]
        je exit_i3_loop

        mov word[j_count], 0
        j3_loop:
            mov ax, word[j_count]
            cmp ax, word[m1]
            je exit_j3_loop

            mov ax, word[i_count]
            add ax, word[j_count]

            mov bx, word[A+2*eax]
            add bx, word[B+2*eax]
            mov word[C + 2*eax], bx
            mov word[num], bx

            ;print the element
            call print_num

            mov eax, 4
            mov ebx, 1
            mov ecx, space
            mov edx, 1
            int 80h

            inc word[j_count]
            jmp j3_loop
        exit_j3_loop:

        ;newline
        mov eax, 4
        mov ebx, 1
        mov ecx, newline
        mov edx, 1
        int 80h

        inc word[i_count]
        jmp i3_loop
    exit_i3_loop:


    ;exit function
=======
    int 80h 

    call read_inp

    mov ax, word[num]
    mov word[n], ax

    call read_inp

    mov ax, word[num]
    mov word[m], ax

    call read_array

    mov ax, word[n]
    mov bx, word[m]
    mul bx
    mov word[arrsize], ax
    call print_array

>>>>>>> 22d0435566f678ce836755c303afe6668c284776
    exit:
        mov eax, 1
        mov ebx, 0
        int 80h

<<<<<<< HEAD
    ;Read integer input from user
    read_inp:
=======
    read_inp:
        pusha
>>>>>>> 22d0435566f678ce836755c303afe6668c284776
        mov word[num], 0
        read_num:

            mov eax, 3
            mov ebx, 0
            mov ecx, temp
            mov edx, 1
            int 80h

            cmp byte[temp], 10
            je exit_read_num

<<<<<<< HEAD
=======
            cmp byte[temp], 32
            je exit_read_num

>>>>>>> 22d0435566f678ce836755c303afe6668c284776
            sub byte[temp], 30h
            mov ax, word[num]
            mov bx, 10
            mul bx

            mov bh, 0
            mov bl, byte[temp]

            add ax, bx
            mov word[num], ax

            jmp read_num
            
        exit_read_num:
<<<<<<< HEAD
=======
    popa
>>>>>>> 22d0435566f678ce836755c303afe6668c284776
    ret

    print_num:
        pusha
        ;while num!= 0
        ;   temp = num%10
        ;   push temp
        ;   num = num/10
        ;   count++

        ;while count!=0
        ;   pop temp
        ;   print temp
        ;   count--
        
        mov word[count], 0
        extract_no:
            cmp word[num], 0
            je exit_extract_no

            mov dx, 0
            mov ax, word[num]
            mov bx, 10
            div bx

            push dx
            mov word[num], ax
            inc word[count]
            jmp extract_no
        exit_extract_no:

        print_no:
            cmp word[count], 0
            je exit_print_no
            pop dx

            mov word[temp], dx
            add word[temp], 30h

            mov eax, 4
            mov ebx, 1
            mov ecx, temp
            mov edx, 1
            int 80h

            dec word[count]
            jmp print_no
        exit_print_no:
    exit_print_num:
<<<<<<< HEAD
    popa 
    ret
=======

    mov eax, 4
    mov ebx, 1
    mov ecx, space
    mov edx, 1
    int 80h
    

    popa
    ret

    print:
        pusha
        call print_num
        
        mov eax, 4
        mov ebx, 1
        mov ecx, 10
        mov edx, 1
        int 80h

        popa
    ret

    
    read_array:
        ;i = 0
        ;k = 0
        ; while i<n:
        ;   j = 0
        ;   while j<m:
        ;       read num
        ;       *(arr + k) = num
        ;       k++
        ;       j++
        ;   i++
        ; endwhile

        ; mov word[arrcount], 0 ;counter

        mov word[arrcount], 0
        mov word[k], 0
        array_loop:
            mov ax, word[arrcount]
            cmp ax, word[n]
            je array_loop_exit

            mov word[j], 0
            array_loop2:
                mov ax, word[m]
                cmp ax, word[j]
                je exit_array_loop2


                call read_inp
                mov cx, word[num]

                mov edi, dword[arrcount]
                mov eax, dword[n]
                mul edi

                mov edi, eax

                mov eax, 0
                mov ax, word[k]

                mov word[arr + 2*eax], cx

                inc word[k]
                inc word[j]
                jmp array_loop2
            exit_array_loop2:

            

            inc word[arrcount]
            jmp array_loop
        array_loop_exit:

    exit_read_array:
    ret

    print_array:


        pusha
        ;while i< n:
        ;   j = 0
        ;   while j<m:
        ;       print(arr + k)
        ;       k++
        ;       j++
        ;   print newline
        ;   
        ;   i++
        mov word[arrcount], 0
        mov word[k], 0
        mov ebx, arr

        ; mov word[num],


        print_array_loop:
            mov ax, word[arrcount]
            cmp ax, word[arrsize]
            je exit_print_array_loop
            mov word[j], 0
            print_array_loop2:
            
                mov ax, word[k]    
                mov cx, word[arr + 2*eax]
                mov word[num], cx
                call print_num

                inc word[k]
                inc word[j]
                jmp print_array_loop2
            exit_print_array2:

            mov eax, 4
            mov ebx, 1
            mov ecx, newline
            mov edx, 1
            int 80h



            

            inc word[arrcount]
            jmp print_array_loop
        exit_print_array_loop:
    exit_print_array:

    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 80h

    popa
    ret
>>>>>>> 22d0435566f678ce836755c303afe6668c284776
